{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8e7e6f95-c444-497a-9111-80f0362f4c7f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# === Load Data ===\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    excel_path = \"DE_Assesment_Results.xlsx\"  # Assume this file is in the same directory as the Streamlit app\n",
    "    df_summary = pd.read_excel(excel_path, sheet_name=\"task3_summary_report\")\n",
    "    df_raw = pd.read_excel(excel_path, sheet_name=\"Total_cleaned_records\")\n",
    "    return df_summary, df_raw\n",
    "\n",
    "# === Page Config ===\n",
    "st.set_page_config(page_title=\"Token Analytics Dashboard\", layout=\"wide\")\n",
    "st.title(\"üìä Token Distribution Dashboard\")\n",
    "\n",
    "# === Load and Display Data ===\n",
    "df_summary, df_raw = load_data()\n",
    "\n",
    "# === Filters ===\n",
    "all_tokens = df_raw['token.symbol'].dropna().unique().tolist()\n",
    "all_types = df_raw['type'].dropna().unique().tolist()\n",
    "\n",
    "st.sidebar.header(\"üîç Filter Transactions\")\n",
    "selected_token = st.sidebar.selectbox(\"Select Token Symbol\", [\"All\"] + all_tokens)\n",
    "selected_type = st.sidebar.selectbox(\"Select Transaction Type\", [\"All\"] + all_types)\n",
    "\n",
    "# Apply filters to raw data\n",
    "df_filtered = df_raw.copy()\n",
    "if selected_token != \"All\":\n",
    "    df_filtered = df_filtered[df_filtered['token.symbol'] == selected_token]\n",
    "if selected_type != \"All\":\n",
    "    df_filtered = df_filtered[df_filtered['type'] == selected_type]\n",
    "\n",
    "# === Summary Table ===\n",
    "st.subheader(\"üì¶ Top Token Holders and Distribution Summary\")\n",
    "st.dataframe(df_summary.style.format({\n",
    "    \"Token Holding\": \"{:.6f}\",\n",
    "    \"% of Total Holding\": \"{:.2f}%\",\n",
    "    \"Tokens Sent\": \"{:.6f}\",\n",
    "    \"% of Total Sent\": \"{:.2f}%\",\n",
    "    \"Tokens Received\": \"{:.6f}\",\n",
    "    \"% of Total Received\": \"{:.2f}%\"\n",
    "}))\n",
    "\n",
    "# === Charts ===\n",
    "st.subheader(\"üìà Visual Breakdown by Address\")\n",
    "col1, col2, col3 = st.columns(3)\n",
    "\n",
    "with col1:\n",
    "    st.markdown(\"#### ü™ô Token Holdings\")\n",
    "    fig1, ax1 = plt.subplots(figsize=(5, 4))\n",
    "    ax1.barh(df_summary['address'], df_summary['Token Holding'], color='green')\n",
    "    ax1.set_xlabel(\"Token Holding\")\n",
    "    ax1.invert_yaxis()\n",
    "    st.pyplot(fig1)\n",
    "\n",
    "with col2:\n",
    "    st.markdown(\"#### üì§ Tokens Sent\")\n",
    "    fig2, ax2 = plt.subplots(figsize=(5, 4))\n",
    "    ax2.barh(df_summary['address'], df_summary['Tokens Sent'], color='red')\n",
    "    ax2.set_xlabel(\"Tokens Sent\")\n",
    "    ax2.invert_yaxis()\n",
    "    st.pyplot(fig2)\n",
    "\n",
    "with col3:\n",
    "    st.markdown(\"#### üì• Tokens Received\")\n",
    "    fig3, ax3 = plt.subplots(figsize=(5, 4))\n",
    "    ax3.barh(df_summary['address'], df_summary['Tokens Received'], color='blue')\n",
    "    ax3.set_xlabel(\"Tokens Received\")\n",
    "    ax3.invert_yaxis()\n",
    "    st.pyplot(fig3)\n",
    "\n",
    "# === Filtered Cleaned Data Table ===\n",
    "st.subheader(\"üìÑ Cleaned Token Transfer Records\")\n",
    "st.dataframe(df_filtered.reset_index(drop=True))\n",
    "\n",
    "# === Footer ===\n",
    "st.markdown(\"---\")\n",
    "st.markdown(\"Made with ‚ù§Ô∏è by Qenehelo | Powered by Streamlit\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
